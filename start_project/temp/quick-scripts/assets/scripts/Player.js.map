{"version":3,"sources":["Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","type","AudioClip","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","soundCallback","callFunc","playJumpSound","repeatForever","sequence","setInputControl","self","systemEvent","on","SystemEvent","EventType","KEY_DOWN","event","keyCode","macro","KEY","a","accLeft","d","accRight","KEY_UP","audioEngine","playEffect","onLoad","jumpAction","node","runAction","xSpeed","start","update","dt","Math","abs","x"],"mappings":"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","file":"Player.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n        accel: 0,\n        jumpAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n    },\n\n    setJumpAction() {\n        const jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight))\n            .easing(cc.easeCubicActionOut());\n\n        const jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight))\n            .easing(cc.easeCubicActionIn());\n        \n        const soundCallback = cc.callFunc(this.playJumpSound, this);\n\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, soundCallback));\n    },\n\n    setInputControl() {\n        const self = this;\n        // add keyboard event listener\n        // When there is a key being pressed down, check the designated direction \n        // and set up acceleration in the corresponding direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, function(event) {\n            switch(event.keyCode) {\n                case cc.macro.KEY.a:\n                    self.accLeft = true;\n                    break;\n                case cc.macro.KEY.d:\n                    self.accRight = true;\n                    break;\n            }\n        });\n        \n        // when releasing the button, stop acceleration in this direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, function(event) {\n            switch(event.keyCode) {\n                case cc.macro.KEY.a:\n                    self.accLeft = false;\n                    break;\n                case cc.macro.KEY.d:\n                    self.accRight = false;\n                    break;\n            }\n        })\n    },\n\n    playJumpSound() {\n        //  play sound via the sound engine\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        //  init jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        //  acceleration direction switch\n        this.accLeft = false;\n        this.accRight = false;\n        //  current horizontal speed of main character\n        this.xSpeed = 0;\n        //  init keyboard input listener\n        this.setInputControl();\n    },\n\n    start() {\n\n    },\n\n    update (dt) {\n        // update speed of each frame according to the current acceleration direction\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // restrict the movement speed of the main character to the maximum movement speed\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reaches its limit, use the max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n        //  update position of the character according to the current speed\n        this.node.x += this.xSpeed * dt\n    },\n});\n"]}