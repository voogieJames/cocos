{"version":3,"sources":["Game.js"],"names":["cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","groundY","y","height","timer","startDuration","spawnNewStar","score","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","starDuration","Math","random","randX","randY","jumpHeight","maxX","width","v2","gainPoint","string","toString","audioEngine","playEffect","gameOver","stopAllActions","director","loadScene","start","update","dt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY;AACRC,qBAAS,IADD;AAERC,kBAAMP,GAAGQ;AAFD,SAFJ;AAMR;AACAC,yBAAiB,CAPT;AAQRC,yBAAiB,CART;AASR;AACAC,gBAAQ;AACJL,qBAAS,IADL;AAEJC,kBAAMP,GAAGY;AAFL,SAVA;AAcR;AACA;AACAC,gBAAQ;AACJP,qBAAS,IADL;AAEJC,kBAAMP,GAAGY;AAFL,SAhBA;AAoBR;AACAE,sBAAc;AACVR,qBAAS,IADC;AAEVC,kBAAMP,GAAGe;AAFC,SArBN;AAyBRC,oBAAY;AACRV,qBAAS,IADD;AAERC,kBAAMP,GAAGiB;AAFD;AAzBJ,KAHP;;AAkCL;;AAEAC,UApCK,oBAoCI;AACL;AACA,aAAKC,OAAL,GAAe,KAAKR,MAAL,CAAYS,CAAZ,GAAiB,KAAKT,MAAL,CAAYU,MAAZ,GAAqB,CAArD;AACA,aAAKC,KAAL,GAAa,CAAb;AACA,aAAKC,aAAL,GAAqB,CAArB;AACA;AACA,aAAKC,YAAL;AACA;AACA,aAAKC,KAAL,GAAa,CAAb;AACH,KA7CI;AA+CLD,gBA/CK,0BA+CU;AACX;AACA,YAAME,UAAU1B,GAAG2B,WAAH,CAAe,KAAKtB,UAApB,CAAhB;AACA;AACA,aAAKuB,IAAL,CAAUC,QAAV,CAAmBH,OAAnB;AACA;AACAA,gBAAQI,WAAR,CAAoB,KAAKC,kBAAL,EAApB;AACA;AACAL,gBAAQM,YAAR,CAAqB,MAArB,EAA6BC,IAA7B,GAAoC,IAApC;AACA;AACA,aAAKC,YAAL,GAAoB,KAAKxB,eAAL,GAAwByB,KAAKC,MAAL,MAAiB,KAAK3B,eAAL,GAAuB,KAAKC,eAA7C,CAA5C;AACA,aAAKY,KAAL,GAAa,CAAb;AACH,KA3DI;AA6DLS,sBA7DK,gCA6DgB;AACjB,YAAIM,QAAQ,CAAZ;AACA;AACA;AACA,YAAMC,QAAQ,KAAKnB,OAAL,GAAegB,KAAKC,MAAL,KAAgB,KAAKvB,MAAL,CAAYmB,YAAZ,CAAyB,QAAzB,EAAmCO,UAAlE,GAA+E,EAA7F;AACA;AACA,YAAMC,OAAO,KAAKZ,IAAL,CAAUa,KAAV,GAAkB,CAA/B;AACAJ,gBAAS,CAACF,KAAKC,MAAL,KAAgB,GAAjB,IAAwB,CAAzB,GAA8BI,IAAtC;AACA;AACA,eAAOxC,GAAG0C,EAAH,CAAML,KAAN,EAAaC,KAAb,CAAP;AACH,KAvEI;AAyELK,aAzEK,uBAyEO;AACR,aAAKlB,KAAL,IAAc,CAAd;AACA,aAAKX,YAAL,CAAkB8B,MAAlB,GAA2B,YAAY,KAAKnB,KAAL,CAAWoB,QAAX,EAAvC;AACA;AACA7C,WAAG8C,WAAH,CAAeC,UAAf,CAA0B,KAAK/B,UAA/B,EAA2C,KAA3C;AACH,KA9EI;AAgFLgC,YAhFK,sBAgFO;AACR,aAAKnC,MAAL,CAAYoC,cAAZ,GADQ,CACsB;AAC9BjD,WAAGkD,QAAH,CAAYC,SAAZ,CAAsB,MAAtB;AACH,KAnFI;AAqFLC,SArFK,mBAqFG,CAEP,CAvFI;AAyFLC,UAzFK,kBAyFGC,EAzFH,EAyFO;AACR;AACA;AACA,YAAI,KAAKhC,KAAL,GAAa,KAAKY,YAAtB,EAAoC;AAChC,iBAAKc,QAAL;AACA;AACH;AACD,aAAK1B,KAAL,IAAcgC,EAAd;AACH;AAjGI,CAAT","file":"Game.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        //  this property sets the PreFab resource of stars\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        //  the random scale of disappearing time for stars\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        //  ground node for confirming the height of the generated star's position\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        //  player node for obtaining the jump height of the main character \n        //  and controlling the movement switch of the main character\n        player: {\n            default: null,\n            type: cc.Node\n        },\n        //  score display\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        //  obtain the anchor point of ground level on the y axis\n        this.groundY = this.ground.y + (this.ground.height / 2);\n        this.timer = 0;\n        this.startDuration = 0;\n        //  generate a new star\n        this.spawnNewStar();\n        //  init score\n        this.score = 0;\n    },\n\n    spawnNewStar() {\n        //  generate a new node in the scene with a present template\n        const newStar = cc.instantiate(this.starPrefab);\n        //  make a newly created node a Canvas node's child\n        this.node.addChild(newStar);\n        //  set a random position for the star\n        newStar.setPosition(this.getNewStarPosition());\n        //  temporarily store game object in the star component\n        newStar.getComponent('Star').game = this;\n        // reset timer, randomly choose a value according the scale of star duration\n        this.starDuration = this.minStarDuration + (Math.random() * (this.maxStarDuration - this.minStarDuration));\n        this.timer = 0;\n    },\n\n    getNewStarPosition() {\n        let randX = 0;\n        //  According to the position of the ground level and the main character's jump height,\n        //  randomly obtain an anchor point of the star on the y axis\n        const randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\n        //  According to the width of the screen, randomly obtain an anchor point of star on the x axis\n        const maxX = this.node.width / 2;\n        randX = ((Math.random() - 0.5) * 2) * maxX;\n        //  return to the anchor point of the star\n        return cc.v2(randX, randY);\n    },\n\n    gainPoint() {\n        this.score += 1;\n        this.scoreDisplay.string = \"score: \" + this.score.toString();\n        // play the scoring sound effect\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    gameOver () {\n        this.player.stopAllActions(); // stop the jumping action of the player node\n        cc.director.loadScene('game');\n    },\n\n    start() {\n\n    },\n\n    update (dt) {\n        // update timer for each frame, when a new star is not generated after exceeding duration\n        // invoke the logic of game failure\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n});\n"]}