{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","getPlayerDistance","node","game","playerPos","player","getPosition","starPos","position","dist","sub","mag","onPicked","spawnNewStar","gainPoint","destroy","start","update","dt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACAC,oBAAY;AAHJ,KAHP;;AASL;;AAEA;;AAEAC,qBAbK,+BAae;AAChB;AACA,YAAG,KAAKC,IAAL,IAAc,KAAKC,IAAtB,EAA4B;AACxB,gBAAMC,YAAY,KAAKD,IAAL,CAAUE,MAAV,CAAiBC,WAAjB,EAAlB;AACA,gBAAMC,UAAU,KAAKL,IAAL,CAAUM,QAA1B;AACA,gBAAGD,WAAWH,SAAd,EAAyB;AACrB;AACA,oBAAMK,OAAOF,QAAQG,GAAR,CAAYN,SAAZ,EAAuBO,GAAvB,EAAb;AACA,uBAAOF,IAAP;AACH;AACJ;AACJ,KAxBI;AA0BLG,YA1BK,sBA0BM;AACP;AACA,aAAKT,IAAL,CAAUU,YAAV;AACA;AACA,aAAKV,IAAL,CAAUW,SAAV;AACA;AACA,aAAKZ,IAAL,CAAUa,OAAV;AACH,KAjCI;AAmCLC,SAnCK,mBAmCI,CAER,CArCI;;AAsCL;AACAC,UAvCK,kBAuCGC,EAvCH,EAuCO;AACR,YAAI,KAAKjB,iBAAL,KAA2B,KAAKD,UAApC,EAAgD;AAC5C,iBAAKY,QAAL;AACA;AACA;AACH;AACJ;AA7CI,CAAT","file":"Star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        //  When the distance between the star and main character is less than this value, \n        //  points will be collected\n        pickRadius: 3\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    getPlayerDistance() {\n        //  get player position\n        if(this.node &&  this.game) {\n            const playerPos = this.game.player.getPosition();\n            const starPos = this.node.position;\n            if(starPos && playerPos) {\n                //  calculate the distance between the player and a star\n                const dist = starPos.sub(playerPos).mag();\n                return dist;\n            }\n        }\n    },\n\n    onPicked() {\n        //  generate a new star when previous is collected\n        this.game.spawnNewStar();\n        //  get that goddamed point\n        this.game.gainPoint();\n        //  now destroy currect star object\n        this.node.destroy();\n    },\n\n    start () {\n\n    },\n    //  on each frame check the distance and if it is lower than pickRadius, run collect function\n    update (dt) {\n        if (this.getPlayerDistance() < this.pickRadius) {\n            this.onPicked();\n            debugger\n            return;\n        }\n    },\n});\n"]}